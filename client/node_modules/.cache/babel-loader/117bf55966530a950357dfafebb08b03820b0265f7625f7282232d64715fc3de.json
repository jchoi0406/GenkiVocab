{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiyon\\\\Desktop\\\\Programming_projects\\\\GenkiVocab\\\\client\\\\src\\\\components\\\\WordList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordList({\n  words\n}) {\n  _s();\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const currentWord = words[currentWordIndex];\n  const shuffleArray = array => {\n    // Implement Fisher-Yates shuffle algorithm\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const handleAnswerClick = meaning => {\n    // Check if the clicked meaning is correct\n    const isCorrect = meaning === currentWord.meaning;\n    // Do something with the correctness, like showing a message\n    console.log(`You clicked ${meaning}. Correct: ${isCorrect}`);\n    // Move to the next word\n    setCurrentWordIndex(currentWordIndex + 1);\n  };\n\n  // Shuffle meanings except for the correct one\n  const shuffledMeanings = shuffleArray(words.filter(word => word !== currentWord).map(word => word.meaning));\n\n  // Insert correct meaning at a random index\n  const randomIndex = Math.floor(Math.random() * 4);\n  shuffledMeanings.splice(randomIndex, 0, currentWord.meaning);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"japaneseWord\",\n      children: currentWord.kana\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: shuffledMeanings.map((meaning, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answers\",\n        onClick: () => handleAnswerClick(meaning),\n        children: meaning\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(WordList, \"5koe6SfZZko7lsLz/4RLKFxnhhY=\");\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WordList","words","_s","currentWordIndex","setCurrentWordIndex","currentWord","shuffleArray","array","i","length","j","Math","floor","random","handleAnswerClick","meaning","isCorrect","console","log","shuffledMeanings","filter","word","map","randomIndex","splice","children","className","kana","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jiyon/Desktop/Programming_projects/GenkiVocab/client/src/components/WordList.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction WordList({ words }) {\r\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n  const currentWord = words[currentWordIndex];\r\n\r\n  const shuffleArray = (array) => {\r\n    // Implement Fisher-Yates shuffle algorithm\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const handleAnswerClick = (meaning) => {\r\n    // Check if the clicked meaning is correct\r\n    const isCorrect = meaning === currentWord.meaning;\r\n    // Do something with the correctness, like showing a message\r\n    console.log(`You clicked ${meaning}. Correct: ${isCorrect}`);\r\n    // Move to the next word\r\n    setCurrentWordIndex(currentWordIndex + 1);\r\n  };\r\n\r\n  // Shuffle meanings except for the correct one\r\n  const shuffledMeanings = shuffleArray(\r\n    words\r\n      .filter((word) => word !== currentWord)\r\n      .map((word) => word.meaning)\r\n  );\r\n\r\n  // Insert correct meaning at a random index\r\n  const randomIndex = Math.floor(Math.random() * 4);\r\n  shuffledMeanings.splice(randomIndex, 0, currentWord.meaning);\r\n\r\n  return (\r\n    <div>\r\n      <div className='japaneseWord'>{currentWord.kana}</div>\r\n      <div>\r\n        {shuffledMeanings.map((meaning, index) => (\r\n          <button key={index} className='answers' onClick={() => handleAnswerClick(meaning)}>\r\n            {meaning}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC3B,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAMQ,WAAW,GAAGJ,KAAK,CAACE,gBAAgB,CAAC;EAE3C,MAAMG,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACA,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOD,KAAK;EACd,CAAC;EAED,MAAMO,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACA,MAAMC,SAAS,GAAGD,OAAO,KAAKV,WAAW,CAACU,OAAO;IACjD;IACAE,OAAO,CAACC,GAAG,CAAE,eAAcH,OAAQ,cAAaC,SAAU,EAAC,CAAC;IAC5D;IACAZ,mBAAmB,CAACD,gBAAgB,GAAG,CAAC,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMgB,gBAAgB,GAAGb,YAAY,CACnCL,KAAK,CACFmB,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKhB,WAAW,CAAC,CACtCiB,GAAG,CAAED,IAAI,IAAKA,IAAI,CAACN,OAAO,CAC/B,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAGZ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACjDM,gBAAgB,CAACK,MAAM,CAACD,WAAW,EAAE,CAAC,EAAElB,WAAW,CAACU,OAAO,CAAC;EAE5D,oBACEhB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAK2B,SAAS,EAAC,cAAc;MAAAD,QAAA,EAAEpB,WAAW,CAACsB;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACtDhC,OAAA;MAAA0B,QAAA,EACGN,gBAAgB,CAACG,GAAG,CAAC,CAACP,OAAO,EAAEiB,KAAK,kBACnCjC,OAAA;QAAoB2B,SAAS,EAAC,SAAS;QAACO,OAAO,EAAEA,CAAA,KAAMnB,iBAAiB,CAACC,OAAO,CAAE;QAAAU,QAAA,EAC/EV;MAAO,GADGiB,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC7B,EAAA,CA7CQF,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AA+CjB,eAAeA,QAAQ;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}