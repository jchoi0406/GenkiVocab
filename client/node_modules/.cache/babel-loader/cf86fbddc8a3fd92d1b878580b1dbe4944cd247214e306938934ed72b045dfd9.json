{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiyon\\\\Desktop\\\\Programming_projects\\\\GenkiVocab\\\\client\\\\src\\\\components\\\\WordList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordList({\n  words,\n  setWords\n}) {\n  _s();\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [shuffledMeanings, setShuffledMeanings] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // Added isLoading state\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false); // Set isLoading to false after 1 second\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (words.length > 0) {\n      const currentWord = words[currentWordIndex];\n      const shuffled = shuffleArray(words.filter(word => word !== currentWord).map(word => word.meaning));\n      const randomIndex = Math.floor(Math.random() * 4);\n      shuffled.splice(randomIndex, 0, currentWord.meaning);\n      setShuffledMeanings(shuffled);\n    }\n  }, [words, currentWordIndex]);\n  const shuffleArray = array => {\n    // Implement Fisher-Yates shuffle algorithm\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const handleAnswerClick = meaning => {\n    if (words.length > 0) {\n      const currentWord = words[currentWordIndex];\n      const isCorrect = meaning === currentWord.meaning;\n      isCorrect ? setIsCorrect(true) : setIsCorrect(false);\n\n      // Trigger a new fetch request\n      setIsLoading(true); // Set isLoading to true to display \"Loading...\" message\n      fetch(\"/learn\").then(res => res.json()).then(data => {\n        setWords(data);\n        setIsLoading(false); // Set isLoading to false after fetching new data\n      }).catch(error => console.error('Error fetching data:', error));\n    }\n  };\n  if (words.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  const currentWord = words[currentWordIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"japaneseWord\",\n      children: currentWord.kana\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [shuffledMeanings.map((meaning, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answers\",\n        onClick: () => handleAnswerClick(meaning),\n        children: meaning\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"correctIndicator\",\n        children: isCorrect !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isCorrect ? 'Correct' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(WordList, \"fjSP/K102Jw6NeQsIf8Cu/ugUz4=\");\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordList","words","setWords","_s","currentWordIndex","setCurrentWordIndex","shuffledMeanings","setShuffledMeanings","isCorrect","setIsCorrect","isLoading","setIsLoading","setTimeout","length","currentWord","shuffled","shuffleArray","filter","word","map","meaning","randomIndex","Math","floor","random","splice","array","i","j","handleAnswerClick","fetch","then","res","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","kana","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jiyon/Desktop/Programming_projects/GenkiVocab/client/src/components/WordList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction WordList({ words, setWords}) {\r\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n  const [shuffledMeanings, setShuffledMeanings] = useState([]);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true); // Added isLoading state\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n        setIsLoading(false); // Set isLoading to false after 1 second\r\n        }, 1000);\r\n    }, []);\r\n  useEffect(() => {\r\n    if (words.length > 0) {\r\n      const currentWord = words[currentWordIndex];\r\n      const shuffled = shuffleArray(\r\n        words.filter((word) => word !== currentWord).map((word) => word.meaning)\r\n      );\r\n      const randomIndex = Math.floor(Math.random() * 4);\r\n      shuffled.splice(randomIndex, 0, currentWord.meaning);\r\n      setShuffledMeanings(shuffled);\r\n    }\r\n  }, [words, currentWordIndex]);\r\n\r\n  const shuffleArray = (array) => {\r\n    // Implement Fisher-Yates shuffle algorithm\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const handleAnswerClick = (meaning) => {\r\n    if (words.length > 0) {\r\n      const currentWord = words[currentWordIndex];\r\n      const isCorrect = meaning === currentWord.meaning;\r\n      isCorrect ? setIsCorrect(true) : setIsCorrect(false);\r\n\r\n      // Trigger a new fetch request\r\n      setIsLoading(true); // Set isLoading to true to display \"Loading...\" message\r\n      fetch(\"/learn\")\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setWords(data);\r\n          setIsLoading(false); // Set isLoading to false after fetching new data\r\n        })\r\n        .catch(error => console.error('Error fetching data:', error));\r\n    }\r\n  };\r\n\r\n  if (words.length === 0) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const currentWord = words[currentWordIndex];\r\n\r\n  return (\r\n    <div>\r\n      <div className='japaneseWord'>{currentWord.kana}</div>\r\n      <div>\r\n        {shuffledMeanings.map((meaning, index) => (\r\n          <button key={index} className='answers' onClick={() => handleAnswerClick(meaning)}>\r\n            {meaning}\r\n          </button>\r\n        ))}\r\n        <div className='correctIndicator'>\r\n            {isCorrect !== null && <p>{isCorrect ? 'Correct' : 'Incorrect'}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}